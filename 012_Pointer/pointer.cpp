/*
指針(pointer)是一種特殊的變數(數據類型)，它存儲的是某一個變敩的地址，而不是變數的值。

&: 取地址運算符，返回變數的地址
*: 指針運算符，返回指針變數所指向的變數的值

指針的變數可以被指派成:
1. 使用&去取得的變數的地址 (型別要匹配)
2. 另一個指針的值
3. NULL
4. 陣列

* 無效指針(invalid pointer)
    - 沒有初始化的指針
    - 很危險，可能會導致程式崩潰，因為它可能指向任何地方
    - 為了避免這種情況，可以將指針初始化為NULL
    - 盡量避免使用無效指針
* 空指針
    - 空指針(NULL pointer)是一種特殊的指針，它不指向任何變數
    - 空指針的值是0
    - 空指針是一個安全的指針，可以用來初始化指針變數，表示這個指針不指向任何地方
    - 空指針需要賦值為NULL或為0，c++之後建議使用"nullptr"來表示空指針
* void*指針
    - void指針是一種特殊的指針，它是一種無類型指針
    - void指針可以指向"任何類型"的變數
    - 不能透過void指針直接取址訪問變數的值，因為void指針不知道變數的類型
    - void指針主要用於函數的參數和返回值，用於實現通用的函數

*/
#include <iostream>
using namespace std;

int main()
{
    int a = 10;
    int b = 20;
    cout << "a address is " << &a << endl; // 取得a的地址
    int* p = nullptr; // 定義一個指向整數的指針變數p，並將其初始化為nullptr

    p = &a; // 定義一個指向整數的指針變數p，並將a的地址賦值給p
    *p = 30; // 通過指針變數p，修改a的值
    cout << "a is " << a << endl;

    p = &b; // 將b的地址賦值給p
    *p = 40; // 通過指針變數p，修改b的值
    cout << "a is " << a << endl;
    cout << "b is " << b << endl;

    void* vp = nullptr; // 定義一個void指針變數vp，並將其初始化為nullptr
    vp = &a; // 將a的地址賦值給vp
    

    return 0;
}